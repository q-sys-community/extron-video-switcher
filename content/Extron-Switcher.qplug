-- The PluginInfo header contains some important information that Q-Sys Designer will parse when compiled.
-- Id is a unique ID given to every plugin. While we typically use randomly generated UUID's, you can use anything here so long as it is unique
--

PluginInfo = {
    Name = "Extron~Switcher (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
    Version = "0.0.0.0-master",
    Id = "qsysc.extron.switcher.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
    Description = "Control for Extron range of Video Switchers (All models)",
    ShowDebug = true,
    Author = "Solo Works London"
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
    extron_blue = {31, 79, 162},
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0}
}

function GetColor(props)
    return Colors.extron_blue
end

local max_sources = 8
-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
    props = {
        {
            Name = "IP Address",
            Type = "string",
            Value = "127.0.0.1"
        },
        {
            Name = "Model",
            Type = "enum",
            Choices = {"SW2 HD 4K (PLUS)", "SW4 HD 4K (PLUS)", "SW6 HD 4K (PLUS)", "SW8 HD 4K (PLUS)"},
            Value = "SW2 HD 4K (PLUS)"
        },
        {
            Name = "Password",
            Type = "string",
            Value = ""
        }
    }
    return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
    return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
    ctls = {
        -- System Pins
        {
            Name = "online",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "ip_address",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Both",
            Count = 1,
            UserPin = true
        },
        {
            Name = "model",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "part_no",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "firmware_version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            Count = 1,
            UserPin = true
        },
        {
            Name = "output_1",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true
        },
        {
            Name = "video_mute",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true
        },
        {
            Name = "audio_mute",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true
        },
        {
            Name = "input_signal",
            ControlType = "Indicator",
            IndicatorType = "Led",
            PinStyle = "Output",
            Count = max_sources,
            UserPin = true
        }
    }
    for s = 1, max_sources do
        table.insert(
            ctls,
            {
                Name = "input_select_" .. s,
                ControlType = "Button",
                ButtonType = "Toggle",
                PinStyle = "Both",
                UserPin = true
            }
        )
    end
    return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"Display"}

-- This function allows you to populate pages in your plugin.
function GetPages(props)
    pages = {}
    table.insert(pages, {name = pagenames[1]})
    return pages
end

-- This function allows you to layout pages in your plugin.
function GetControlLayout(props)
    local layout = {}

    input_count = string.match(props["Model"].Value, "SW(%d+)")

    local sources_groupbox_position = {0, 144}
    local sources_groupbox_size = {224, 212}
    local btn_size = {32, 24}

    sources_groupbox_size[2] = (2.5 * btn_size[2] + (input_count * btn_size[2]))

    graphics = {
        {
            Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
            Text = "Info",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.Black,
            StrokeWidth = 1,
            Position = {0, 0},
            Size = {224, 128}
        },
        {
            Type = "Text",
            Text = "Online:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 0},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "IP Address:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 20},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "Model:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 40},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "Part Number:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 60},
            Size = {100, 20}
        },
        {
            Type = "Text",
            Text = "Software:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.Black,
            Position = {0, 80},
            Size = {100, 20}
        },
        {
            Type = "GroupBox",
            Text = "Switcher",
            HTextAlign = "Left",
            Fill = Colors.White,
            CornerRadius = 8,
            StrokeColor = Colors.Black,
            StrokeWidth = 1,
            Position = sources_groupbox_position,
            Size = sources_groupbox_size
        },
        {
            Type = "Text",
            Text = "Signal",
            FontSize = 10,
            Position = {sources_groupbox_position[1], (sources_groupbox_position[2] + 0.5 * btn_size[2] + btn_size[2])},
            Size = btn_size
        }
    }
    for i = 1, input_count do
        table.insert(
            graphics,
            {
                Type = "Text",
                Text = "In" .. i,
                Position = {
                    (sources_groupbox_position[1] + btn_size[1]),
                    (sources_groupbox_position[2] + 0.5 * btn_size[2] + (1 * btn_size[2])) + (i * btn_size[2])
                },
                Size = btn_size
            }
        )
    end
    -- System
    layout["online"] = {
        PrettyName = "System~Online",
        Style = "Indicator",
        Color = {0, 255, 0},
        Position = {100, 00},
        Size = {20, 20}
    }
    layout["ip_address"] = {
        PrettyName = "System~IP Address",
        Style = "TextBox",
        Position = {100, 20},
        Size = {100, 20}
    }
    layout["model"] = {
        PrettyName = "System~Model Name",
        Style = "Text",
        Position = {100, 40},
        Size = {100, 20}
    }
    layout["part_no"] = {
        PrettyName = "System~Part Number",
        Style = "Text",
        Position = {100, 60},
        Size = {100, 20}
    }
    layout["firmware_version"] = {
        PrettyName = "System~Firmware Version",
        Style = "Text",
        Position = {100, 80},
        Size = {100, 20}
    }
    -- Source Ports
    for s = 1, input_count do
        -- Source Select
        layout["input_select_" .. s] = {
            PrettyName = string.format("Input %02i Select", s),
            Style = "Button",
            Legend = tostring(s),
            Position = {
                (sources_groupbox_position[1] + 2 * btn_size[1]),
                (sources_groupbox_position[2] + 0.5 * btn_size[2] + (s + 1) * btn_size[2])
            },
            Size = btn_size
        }
        -- Source Signal
        layout["input_signal " .. s] = {
            PrettyName = string.format("Input%02i Signal", s),
            Style = "Indicator",
            Color = {0, 255, 0},
            Position = {
                (sources_groupbox_position[1] + (btn_size[1] - btn_size[2]) / 2),
                (sources_groupbox_position[2] + 0.5 * btn_size[2] + (s + 1) * btn_size[2])
            },
            Size = {btn_size[2], btn_size[2]}
        }
    end

    -- Active Source
    layout["output_1"] = {
        PrettyName = string.format("Active Source"),
        Style = "Text",
        Position = {
            (sources_groupbox_position[1] + 2 * btn_size[1]),
            (sources_groupbox_position[2] + 0.5 * btn_size[2] + btn_size[2])
        },
        Size = btn_size
    }
    layout["video_mute"] = {
        PrettyName = string.format("AV Mute"),
        Style = "Button",
        Legend = "Mute",
        Color = {223, 0, 36},
        Position = {
            (sources_groupbox_position[1] + 2 * btn_size[1]),
            (sources_groupbox_position[2] + 0.5 * btn_size[2])
        },
        Size = btn_size
    }
    return layout, graphics
end

function switcher_feedback(inp)
    Controls["output_1"].String = inp
    for i = 1, max_sources do
        Controls["input_select_" .. i].Boolean = false
    end
    if inp ~= "0" then
        Controls["input_select_" .. inp].Boolean = true
    end
end

function switch_command(inp) -- Potentially add an if statement if a toggle for audio link is implemented
    fnSend(inp .. "!")
end

if Controls then
    -- Local Structure for holding State
    Extron = {
        Host = "",
        Port = 23,
        Rx = ""
    }

    -- Build TCP Client
    conn = TcpSocket.New()
    conn.ReadTimeout = 0
    conn.WriteTimeout = 0
    conn.ReconnectTimeout = 5

    -- Create and setup the Communications Timeout
    timerComms = Timer.New()
    timerComms.EventHandler = function(timer)
        timer:Stop()
        Controls["online"].Boolean = false
        print("Connection Timed Out")
        conn:Disconnect()
        fnConnect()
    end

    -- Create and setup Polling
    timerPoll = Timer.New()

    timerPoll.EventHandler = function(timer)
        fnPoll()
    end

    function fnInitPoll(activate)
        timerPoll:Stop()
        if activate == true then
            timerPoll:Start(10)
        end
    end

    function fnPoll()
        -- Poll the Info
        fnSend("I")
        fnSend(string.char(27) .. "LS" .. string.char(10))
    end

    -- Data Sending Helper Function
    function fnSend(cmd)
        -- Send to device
        print("-->Extron::" .. cmd)
        conn:Write(cmd)
        -- Reset Polling
        fnInitPoll(true)
    end

    function fnInit()
        -- Set Verbose Mode to full comms
        fnSend(string.char(27) .. "3CV" .. string.char(10))
    end

    -- Setup Utility Callbacks as required
    conn.Connected = function(conn)
        print("TCP socket is Connected")
        --for i = 1, max_sources do
            --Controls["input_signal " .. i].Value = false
        --end
        -- Set a timer to wait for connection to establish
        Timer.CallAfter(fnInit, 1)
    end
    conn.Reconnect = function(conn)
        print("TCP socket is Reconnecting")
    end
    conn.Closed = function(conn)
        print("TCP socket was closed by the remote end")
        fnInitPoll(false)
    end
    conn.Error = function(conn, err)
        print("TCP socket had an error ::")
        print(err)
    end
    conn.Timeout = function(conn, err)
        print("TCP socket had an timeout ::")
        print(err)
    end

    -- Helper Function - Open TCP Connection
    function fnConnect()
        -- Open Connection
        conn:Connect(Extron.Host, Extron.Port)
        print("TCP socket is Connecting")
        -- Set IP address value
        if Controls.ip_address then
            Controls.ip_address.String = Extron.Host .. ":" .. Extron.Port
        end
    end

    local function split(str, delim)
        local result = {}
        for part in str:gmatch("[^" .. delim .. "]+") do
            result[#result + 1] = part
        end
        return result
    end

    -- Setup Data Callbacks as required
    conn.Data = function(conn)
        -- Read out lines from the buffer
        line = conn:ReadLine(TcpSocket.EOL.Any)
        while (line ~= nil) do
            -- Print Line
            print(line)
            if line == "Password:" then
                conn:Write(password .. "\r")
            elseif line:sub(1, 5) == "Login" then
                fnInit()
            elseif line:sub(1, 3) == "Pno" then
                Controls.part_no.String = line:sub(4, -1)
                timerComms:Stop()
                if Controls.online then -- Check for when developing in a Control Script block
                    Controls.online.Boolean = true
                end
                timerComms:Start(30)
            elseif line:sub(1, 3) == "Vrb" then
                -- Get Meta Data
                fnSend("I")
                fnSend("N")
                fnSend("Q")
                fnSend("1I")
                -- Start Polling
                fnPoll()
            elseif line:sub(1, 5) == "Inf01" then
                Controls.model.String = line:sub(7, -1)
            elseif line:sub(1, 5) == "Ver01" then
                Controls.firmware_version.String = line:sub(7, -1)
            elseif line:sub(1, 3) == "Sig" then
                -- Split up the Signals
                for p, data in ipairs(split(line:sub(4, -3), " ")) do
                    Controls["input_signal"][p].Value = (data == "1")
                end
            --elseif line:sub(1, 3) == "Vmt" then
                --Controls["video_mute"].Boolean = tonumber(line:sub(4, 4)) == 1
            --elseif line:sub(1,3) == "Amt" then
                --Controls["audio_mute"].Boolean = line:sub(4,4)
            elseif line:sub(1, 3) == "Sig" then
                -- Split up the Signals
                for p, data in ipairs(split(line:sub(4, -3), " ")) do
                    Controls["input_signal " .. p].Value = (data == "1")
                end
                print("Output active: " .. line:sub(-1,-1))
            elseif string.find(line, "In%d+ All") ~= nil then
                local inp = string.match(line, "In(%d+) All")
                switcher_feedback(inp)
            elseif string.find(line, "In%d+ Ausw%d+ Afmt%d+ Vmt%d+") then
                local inp, ausw, amt, vmt = string.match(line, "In(%d+) Ausw(%d+) Afmt(%d+) Vmt(%d+)")
                switcher_feedback(inp)
                --Controls["autoswitch_mode"].Boolean = auto =="1"
                Controls["video_mute"].Boolean = vmt == "1"
                Controls["audio_mute"].Boolean = amt == "1"
            elseif line == "E01" then
                print("Error: Invalid input channel (out of range)")
            elseif line == "E06" then
                print("Error: Invalid input during auto-input switching")
            elseif line == "E10" then
                print("Error: Invalid command (May be due to auto-switch mode)")
            elseif line == "E13" then
                print("Error: Invalid value (out of range)")
            end
            -- Get New Line
            line = conn:ReadLine(TcpSocket.EOL.Any)
        end
    end
    -- Set IP address from Properties if present
    if Properties then
        if Properties["IP Address"].Value ~= "" then
            Extron.Host = Properties["IP Address"].Value
            fnConnect()
        else
            print("IP Address Property Not Set")
        end
        password = Properties["Password"].Value
    end
    -- Loop through all Controls and setup Event Handlers
    Controls["output_1"].EventHandler = function()
        switch_command(Controls["output_1"].String)
    end
    Controls["video_mute"].EventHandler = function()
        if Controls["video_mute"].Boolean then
            fnSend("1B")
        else
            fnSend("0B")
        end
    end
    for i = 1, max_sources do
        Controls["input_select_" .. i].EventHandler = function()
            if Controls["input_select_" .. i].Boolean then
                switch_command(i)
            else
                switch_command(0)
            end
        end
    end
end